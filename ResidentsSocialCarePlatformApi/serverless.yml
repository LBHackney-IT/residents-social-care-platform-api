service: residents-social-care-platform-api
provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 2048
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

package:
  artifact: ./bin/release/netcoreapp3.1/residents-social-care-platform-api.zip

functions:
  residentsSocialCarePlatformApi:
    name: ${self:service}-${self:provider.stage}
    handler: ResidentsSocialCarePlatformApi::ResidentsSocialCarePlatformApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    timeout: 30
    environment:
      CONNECTION_STRING: Host=${ssm:/aws/reference/secretsmanager/mosaic_prod_postgres_db_host~true};Port=${ssm:/aws/reference/secretsmanager/mosaic_prod_postgres_db_port~true};Database=${ssm:/aws/reference/secretsmanager/mosaic_prod_postgres_db_name~true};Username=${ssm:/aws/reference/secretsmanager/mosaic_prod_postgres_db_username~true};MaxPoolSize=100;
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: false
    provisionedConcurrency: 10
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    production:
      securityGroupIds:
        - sg-0dca2fcba0bf7a01f
      subnetIds:
        - subnet-0665104ee973a21be
        - subnet-005b74d8082f68a84
